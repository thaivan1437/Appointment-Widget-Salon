{
  "env": {
    "browser": true,
    "node": true,
    "es2021": true
  },
  "extends": [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:prettier/recommended",
    "prettier"
  ],
  "parserOptions": {
    "ecmaFeatures": {
      "jsx": true
    },
    "ecmaVersion": 12
  },
  "parser": "babel-eslint",
  "plugins": [
    "react",
    "prettier",
    "lodash",
    "import",
    "@typescript-eslint"
  ],
  "rules": {
    "import/no-unresolved": "off",
    "standard/computed-property-even-spacing": "off",
    "lodash/import-scope": "error",
    "react/jsx-no-undef": [
      "error",
      {
        "allowGlobals": true
      }
    ],
    "prefer-const": "error",
    "no-var": "error",
    "prefer-template": "error",
    "import/order": [
      "error",
      {
        "groups": [
          "builtin",
          "external",
          "index",
          "sibling",
          "parent",
          "internal"
        ],
        "newlines-between": "never"
      }
    ],
    "react/prop-types": 0,
    "react/jsx-key": 0,
    "import/no-duplicates": "error",
    "import/newline-after-import": "error",
    "react/no-access-state-in-setstate": "error",
    "prettier/prettier": "error",
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/camelcase": "off",
    "@typescript-eslint/no-use-before-define": "off",
    "@typescript-eslint/no-unused-vars": ["error"],
    "react/jsx-curly-brace-presence": ["error"]
  },
  "settings": {
    "import/parsers": {
      "@typescript-eslint/parser": [
        ".ts",
        ".tsx"
      ]
    },
    "import/resolver": {
//      // use <root>/tsconfig.json
//      "typescript": {
//        "alwaysTryTypes": true // always try to resolve types under `<root>@types` directory even it doesn't contain any source code, like `@types/unist`
//      }

      // use <root>/path/to/folder/tsconfig.json
//      "typescript": {
//        "project": "tsconfig.json"
//      }
//
//      // Multiple tsconfigs (Useful for monorepos)
//
//      // use a glob pattern
//      "typescript": {
//        "project": "packages/*/tsconfig.json"
//      },
//
//      // use an array
//      "typescript": {
//        "project": [
//          "packages/module-a/tsconfig.json",
//          "packages/module-b/tsconfig.json"
//        ]
//      },
//
//      // use an array of glob patterns
//      "typescript": {
//        "project": [
//          "packages/*/tsconfig.json",
//          "other-packages/*/tsconfig.json"
//        ]
//      }
    },
    "react": {
      "createClass": "createReactClass",
      "pragma": "React",
      "version": "16.12"
    }
  }
}
